// deno-lint-ignore-file no-unused-vars
// deno-lint-ignore-file no-explicit-any

import { ChuK·ª≥ } from "../../H√†m h·ªó tr·ª£/H√†m v√† ki·ªÉu cho th·ªùi gian.ts";
import { H·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠, H·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠, K·ª≥Ph√≠, S·ªëTi·ªÅn, Thi·∫øtL·∫≠pPh√≠ } from "../../H√†m h·ªó tr·ª£/Ki·ªÉu cho h·ª£p ƒë·ªìng v√† ph√≠.ts";
import { ResBody } from "../../H√†m h·ªó tr·ª£/Ki·ªÉu cho client v√† server.ts";
import {
  ArgsFibery,
  ContextFibery,
  EntityFibery,
  EntityFiberyToCreate,
  FiberyService,
  HttpService,
  Id,
  Tr∆∞·ªùngFibery,
} from "../../H√†m h·ªó tr·ª£/Ki·ªÉu cho Fibery.ts";

const databaseK·ª≥Ph√≠ = "Cathay Life/K·ª≥ ph√≠";

export const h√¥mNay = new Date().toISOString().split("T")[0].trim();
export declare const context: ContextFibery;

export const fibery = context.getService("fibery") as FiberyService;
export const http = context.getService("http") as HttpService;

export interface EntityH·ª£pƒê·ªìng extends EntityFibery {
  "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": string | undefined;
  "T·ªïng ph√≠": S·ªëTi·ªÅn;
  "S·ªë ti·ªÅn m·ªói k·ª≥": S·ªëTi·ªÅn;
  "Chu k·ª≥": Tr∆∞·ªùngFibery<Capitalize<ChuK·ª≥>>;
  "K·ª≥ ph√≠": Tr∆∞·ªùngFibery<string>[] | undefined;
  People: Tr∆∞·ªùngFibery<string>;
}
interface EntityK·ª≥Ph√≠ extends EntityFibery {
  "Ng√†y ƒë√≥ng": string;
  "Ng√†y ƒë√≥ng k·∫ø ti·∫øp": string;
  "Ph√≠ ƒë√≥ng": S·ªëTi·ªÅn;
  "T·ªïng s·ªë ph√≠ ho√†n th√†nh": S·ªëTi·ªÅn;
  People: Tr∆∞·ªùngFibery<string>;
}
interface EntityK·ª≥Ph√≠ƒê·ªÉT·∫°o extends EntityFiberyToCreate {
  "Ng√†y ƒë√≥ng": string;
  "Ng√†y ƒë√≥ng k·∫ø ti·∫øp": string;
  "Ph√≠ ƒë√≥ng": S·ªëTi·ªÅn;
  "T·ªïng s·ªë ph√≠ ho√†n th√†nh": S·ªëTi·ªÅn;
}
function l·∫•yK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi({ c√°cV·∫≠tTh·ªÉPh√≠ }: H·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠) {
  const v·∫≠tTh·ªÉPh√≠Cu·ªëiC√πng = c√°cV·∫≠tTh·ªÉPh√≠.slice(-1)[0];
  return v·∫≠tTh·ªÉPh√≠Cu·ªëiC√πng.k·∫øHo·∫°chƒê√≥ngPh√≠;
}
export function t·∫°oH·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠({
  "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠,
  "T·ªïng ph√≠": t·ªïngPh√≠,
  "Chu k·ª≥": { Name: chuK·ª≥ },
  "S·ªë ti·ªÅn m·ªói k·ª≥": s·ªëTi·ªÅnM·ªóiK·ª≥,
}: EntityH·ª£pƒê·ªìng): H·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠ {
  const dsC√°cD√≤ng = c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠ ? c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠.trim().split("\n") : undefined;
  const c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠Tr∆∞·ªõcƒê√¢y: Thi·∫øtL·∫≠pPh√≠[] = dsC√°cD√≤ng?.map((d√≤ng) => {
    const split1 = d√≤ng.split(": ");
    const split2 = split1[1].split(", ");
    return {
      ng√†yThi·∫øtL·∫≠p: split1[0].trim(),
      chuK·ª≥: split2[0].trim().toLocaleLowerCase() as ChuK·ª≥,
      s·ªëTi·ªÅnM·ªóiK·ª≥: Number(split2[1].trim()),
    };
  }) || [];
  const l·∫ßnThi·∫øtL·∫≠pPh√≠L·∫ßnN√†y: Thi·∫øtL·∫≠pPh√≠ = {
    chuK·ª≥: chuK·ª≥.toLocaleLowerCase() as ChuK·ª≥,
    ng√†yThi·∫øtL·∫≠p: new Date().toISOString().split("T")[0],
    s·ªëTi·ªÅnM·ªóiK·ª≥: s·ªëTi·ªÅnM·ªóiK·ª≥,
  };
  return {
    t·ªïngPh√≠: t·ªïngPh√≠,
    c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠: c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠Tr∆∞·ªõcƒê√¢y.concat(l·∫ßnThi·∫øtL·∫≠pPh√≠L·∫ßnN√†y),
  };
}
export async function l·∫•yK·∫øtQu·∫£T√≠nhTo√°n(h·ª£pƒê·ªìng: H·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠): Promise<ResBody> {
  const res = await http.postAsync("https://nhucau.deno.dev", { body: h·ª£pƒê·ªìng });
  return JSON.parse(res);
}
export async function c·∫≠pNh·∫≠tC√°cL·∫ßnThi·∫øtL·∫≠pPh√≠({
  "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠,
  "Chu k·ª≥": { Name: chuK·ª≥ },
  "S·ªë ti·ªÅn m·ªói k·ª≥": s·ªëTi·ªÅnM·ªóiK·ª≥,
  Type,
  Id,
}: EntityH·ª£pƒê·ªìng) {
  if (!chuK·ª≥) return;

  let textLog: string;
  if (!c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠) {
    textLog = `${h√¥mNay}: ${chuK·ª≥.toLocaleLowerCase()}, ${s·ªëTi·ªÅnM·ªóiK·ª≥}`;
  } else {
    textLog = c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠.trim() + `\n${h√¥mNay}: ${chuK·ª≥.toLocaleLowerCase()}, ${s·ªëTi·ªÅnM·ªóiK·ª≥}`;
  }
  await fibery.updateEntity(Type as string, Id as string, { "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": textLog });
}
/** Xo√° c√°c k·ª≥ ph√≠ sau ng√†y thi·∫øt l·∫≠p ph√≠ m·ªõi */

export async function xo√°C√°cK·ª≥Ph√≠B·ªãB·ªè(c√°cK·ª≥Ph√≠B·ªãB·ªè: K·ª≥Ph√≠[], { Type: databaseH·ª£pƒê·ªìng, Id: idH·ª£pƒê·ªìng }: EntityH·ª£pƒê·ªìng) {
  const c√°cV·∫≠tTh·ªÉTr∆∞·ªùngK·ª≥Ph√≠ƒêangC√≥ = (await fibery.getEntityById(databaseH·ª£pƒê·ªìng, idH·ª£pƒê·ªìng, ["K·ª≥ ph√≠"]))["K·ª≥ ph√≠"] as Tr∆∞·ªùngFibery<string>[];
  if (c√°cV·∫≠tTh·ªÉTr∆∞·ªùngK·ª≥Ph√≠ƒêangC√≥.length === 0) return;

  const idC√°cK·ª≥Ph√≠ƒêangC√≥ = c√°cV·∫≠tTh·ªÉTr∆∞·ªùngK·ª≥Ph√≠ƒêangC√≥.map(({ Id }) => Id);
  const idV√†Ng√†yƒê√≥ngC√°cK·ª≥Ph√≠ƒêangC√≥ = await fibery.getEntitiesByIds("K·ª≥ ph√≠", idC√°cK·ª≥Ph√≠ƒêangC√≥, ["Ng√†y ƒë√≥ng"]) as {
    Id: string;
    "Ng√†y ƒë√≥ng": string;
  }[];
  console.log("üöÄ ~ idV√†Ng√†yƒê√≥ngC√°cK·ª≥Ph√≠ƒêangC√≥:", idV√†Ng√†yƒê√≥ngC√°cK·ª≥Ph√≠ƒêangC√≥);

  /** c√°cNg√†yƒê√≥ngPh√≠B·ªãB·ªè l√† c√°c ng√†y sau ng√†y thi·∫øt l·∫≠p ph√≠ */
  const c√°cNg√†yƒê√≥ngPh√≠B·ªãB·ªè = c√°cK·ª≥Ph√≠B·ªãB·ªè.map(({ ng√†yƒê√≥ng }) => ng√†yƒê√≥ng);
  console.log("üöÄ ~ c√°cNg√†yƒê√≥ngPh√≠B·ªãB·ªè:", c√°cNg√†yƒê√≥ngPh√≠B·ªãB·ªè);
  const idC√°cK·ª≥Ph√≠B·ªãB·ªè = idV√†Ng√†yƒê√≥ngC√°cK·ª≥Ph√≠ƒêangC√≥.flatMap(({ Id, "Ng√†y ƒë√≥ng": ng√†yƒê√≥ng }) => c√°cNg√†yƒê√≥ngPh√≠B·ªãB·ªè.includes(ng√†yƒê√≥ng) ? [Id] : []);
  console.log("üöÄ ~ idC√°cK·ª≥Ph√≠B·ªãB·ªè:", idC√°cK·ª≥Ph√≠B·ªãB·ªè);
  await fibery.deleteEntityBatch(databaseK·ª≥Ph√≠, idC√°cK·ª≥Ph√≠B·ªãB·ªè);
}

export async function ghiK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi(
  h·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠: H·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠,
  entityH·ª£pƒê·ªìng: EntityH·ª£pƒê·ªìng,
) {
  const k·∫øHo·∫°chƒê√≥ngPh√≠ = l·∫•yK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi(h·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠);
  const { Name: t√™nH·ª£pƒê·ªìng, Type: databaseH·ª£pƒê·ªìng, Id: idEntityH·ª£pƒê·ªìng, "Chu k·ª≥": { Name: chuK·ª≥ } } = entityH·ª£pƒê·ªìng;
  const c√°cEntityK·ª≥Ph√≠ƒê·ªÉT·∫°o: EntityK·ª≥Ph√≠ƒê·ªÉT·∫°o[] = k·∫øHo·∫°chƒê√≥ngPh√≠.map(({ ng√†yƒê√≥ng, ng√†yƒê√≥ngK·∫øTi·∫øp, ph√≠ƒê√≥ng, t·ªïngS·ªëPh√≠Ho√†nTh√†nh }) => {
    return {
      "Ng√†y ƒë√≥ng k·∫ø ti·∫øp": ng√†yƒê√≥ngK·∫øTi·∫øp ? ng√†yƒê√≥ngK·∫øTi·∫øp.toString() : "2099-12-31",
      "Ng√†y ƒë√≥ng": String(ng√†yƒê√≥ng),
      "Ph√≠ ƒë√≥ng": ph√≠ƒê√≥ng,
      "T·ªïng s·ªë ph√≠ ho√†n th√†nh": t·ªïngS·ªëPh√≠Ho√†nTh√†nh,
    };
  });

  const c√°cEntityK·ª≥Ph√≠ƒê∆∞·ª£cT·∫°o: EntityFibery[] = await fibery.createEntityBatch(databaseK·ª≥Ph√≠, c√°cEntityK·ª≥Ph√≠ƒê·ªÉT·∫°o);
  const dsEntityK·ª≥Ph√≠D√πngƒê·ªÉTh√™m = c√°cEntityK·ª≥Ph√≠ƒê∆∞·ª£cT·∫°o.map((i) => {
    return { id: idEntityH·ª£pƒê·ªìng, itemId: i.Id };
  });
  await fibery.addCollectionItemBatch(databaseH·ª£pƒê·ªìng, "K·ª≥ ph√≠", dsEntityK·ª≥Ph√≠D√πngƒê·ªÉTh√™m);

  const c√°cEntityPeopleTrongEntityH·ª£pƒê·ªìng: EntityFibery[] = (await fibery.getEntityById(databaseH·ª£pƒê·ªìng, idEntityH·ª£pƒê·ªìng, [
    "People (NDBH)",
  ]))["People (NDBH)"];
  for (const { Id: idEntityK·ª≥Ph√≠ } of c√°cEntityK·ª≥Ph√≠ƒê∆∞·ª£cT·∫°o) {
    const dsEntityPeopleD√πngƒê·ªÉTh√™m = c√°cEntityPeopleTrongEntityH·ª£pƒê·ªìng.map((i) => {
      return { id: idEntityK·ª≥Ph√≠, itemId: i.Id };
    });
    await fibery.addCollectionItemBatch(databaseK·ª≥Ph√≠, "People", dsEntityPeopleD√πngƒê·ªÉTh√™m);
  }
}
