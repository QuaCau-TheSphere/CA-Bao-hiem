// deno-lint-ignore-file no-unused-vars
// deno-lint-ignore-file no-explicit-any

import { ChuK·ª≥ } from "../H√†m h·ªó tr·ª£/H√†m v√† ki·ªÉu cho th·ªùi gian.ts";
import { H·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠, H·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠, S·ªëTi·ªÅn, Thi·∫øtL·∫≠pPh√≠ } from "../H√†m h·ªó tr·ª£/Ki·ªÉu.ts";
import { ArgsFibery, ContextFibery, EntityFibery, FiberyService, HttpService, Tr∆∞·ªùngFibery } from "../H√†m h·ªó tr·ª£/Ki·ªÉu cho Fibery.ts";
import { l·∫•yK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi } from "./X·ª≠ l√Ω v·∫≠t th·ªÉ ph√≠.ts";

declare const context: ContextFibery, args: ArgsFibery;
const fibery = context.getService("fibery") as FiberyService;
const http = context.getService("http") as HttpService;

interface EntityH·ª£pƒê·ªìng extends EntityFibery {
  "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": string;
  "T·ªïng ph√≠": S·ªëTi·ªÅn;
  "S·ªë ti·ªÅn m·ªói k·ª≥": S·ªëTi·ªÅn;
  "Chu k·ª≥": Tr∆∞·ªùngFibery;
  "K·ª≥ ƒë√≥ng ph√≠": string;
  "K·∫ø ho·∫°ch ƒë√≥ng ph√≠": string;
}

interface EntityK·ª≥Ph√≠ extends EntityFibery {
  "Ng√†y ƒë√≥ng": string;
  "Ng√†y ƒë√≥ng k·∫ø ti·∫øp": string;
  "Ph√≠ ƒë√≥ng": S·ªëTi·ªÅn;
  "T·ªïng s·ªë ph√≠ ho√†n th√†nh": S·ªëTi·ªÅn;
}

function t·∫°oH·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠({
  "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠,
  "T·ªïng ph√≠": t·ªïngPh√≠,
  "Chu k·ª≥": { Name: chuK·ª≥ },
  "S·ªë ti·ªÅn m·ªói k·ª≥": s·ªëTi·ªÅnM·ªóiK·ª≥,
}: EntityH·ª£pƒê·ªìng): H·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠ {
  const dsC√°cD√≤ng = c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠.trim().split("\n");
  const c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠Tr∆∞·ªõcƒê√¢y: Thi·∫øtL·∫≠pPh√≠[] = dsC√°cD√≤ng.map((d√≤ng) => {
    const split1 = d√≤ng.split(":");
    const split2 = split1[1].split(",");
    return {
      ng√†yThi·∫øtL·∫≠p: split1[0].trim(),
      chuK·ª≥: split2[0].trim().toLocaleLowerCase() as ChuK·ª≥,
      s·ªëTi·ªÅnM·ªóiK·ª≥: Number(split2[1].trim()),
    };
  });
  const l·∫ßnThi·∫øtL·∫≠pPh√≠L·∫ßnN√†y: Thi·∫øtL·∫≠pPh√≠ = {
    chuK·ª≥: chuK·ª≥.toLocaleLowerCase() as ChuK·ª≥,
    ng√†yThi·∫øtL·∫≠p: new Date().toISOString().split("T")[0],
    s·ªëTi·ªÅnM·ªóiK·ª≥: s·ªëTi·ªÅnM·ªóiK·ª≥,
  };
  return {
    t·ªïngPh√≠: t·ªïngPh√≠,
    c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠: c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠Tr∆∞·ªõcƒê√¢y.concat(l·∫ßnThi·∫øtL·∫≠pPh√≠L·∫ßnN√†y),
  };
}

async function l·∫•yH·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠(h·ª£pƒê·ªìng: H·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠): Promise<H·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠> {
  const res = await http.postAsync("https://nhucau.deno.dev", { body: h·ª£pƒê·ªìng });
  return JSON.parse(res);
}

async function c·∫≠pNh·∫≠tC√°cL·∫ßnThi·∫øtL·∫≠pPh√≠({
  "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠,
  "Chu k·ª≥": { Name: chuK·ª≥ },
  "S·ªë ti·ªÅn m·ªói k·ª≥": s·ªëTi·ªÅnM·ªóiK·ª≥,
  Type,
  Id,
}: EntityH·ª£pƒê·ªìng) {
  const h√¥mNay = new Date().toISOString().split("T")[0].trim();
  const text = c√°cL·∫ßnThi·∫øtL·∫≠pPh√≠.trim() + `\n${h√¥mNay}: ${chuK·ª≥.toLocaleLowerCase()}, ${s·ªëTi·ªÅnM·ªóiK·ª≥}`;
  await fibery.updateEntity(Type as string, Id as string, { "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": text });
}

async function ghiK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi(h·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠: H·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠) {
  const k·∫øHo·∫°chƒê√≥ngPh√≠ = l·∫•yK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi(h·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠);
  const entities: EntityK·ª≥Ph√≠[] = k·∫øHo·∫°chƒê√≥ngPh√≠.map(({ ng√†yƒê√≥ng, ng√†yƒê√≥ngK·∫øTi·∫øp, ph√≠ƒê√≥ng, t·ªïngS·ªëPh√≠Ho√†nTh√†nh }) => {
    return {
      Name: "",
      "Ng√†y ƒë√≥ng k·∫ø ti·∫øp": ng√†yƒê√≥ngK·∫øTi·∫øp ? ng√†yƒê√≥ngK·∫øTi·∫øp.toString() : "2099-12-31",
      "Ng√†y ƒë√≥ng": String(ng√†yƒê√≥ng),
      "Ph√≠ ƒë√≥ng": ph√≠ƒê√≥ng,
      "T·ªïng s·ªë ph√≠ ho√†n th√†nh": t·ªïngS·ªëPh√≠Ho√†nTh√†nh,
    };
  });
  const type = "K·ª≥ ph√≠";
  await fibery.createEntityBatch(type, entities);
  await fibery.updateEntity(Type, Id, { "C√°c l·∫ßn thi·∫øt l·∫≠p ph√≠": text });
}
for (const entity of args.currentEntities as EntityH·ª£pƒê·ªìng[]) {
  const h·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠ = t·∫°oH·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠(entity);
  const h·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠ = await l·∫•yH·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠(h·ª£pƒê·ªìngThi·∫øtL·∫≠pPh√≠);
  await c·∫≠pNh·∫≠tC√°cL·∫ßnThi·∫øtL·∫≠pPh√≠(entity);
  await ghiK·∫øHo·∫°chƒê√≥ngPh√≠M·ªõi(h·ª£pƒê·ªìngV·∫≠tTh·ªÉPh√≠);
}

// // to get collection fields query the API and provide the list of fields
// const entityWithExtraFields = await fibery.getEntityById(entity.type, entity.id, ["Chu k·ª≥", "K·ª≥ ƒë√≥ng ph√≠"]);
// console.log("üöÄ ~ entityWithExtraFields:", entityWithExtraFields);

// // to update an entity provide an object with the new values
// await fibery.updateEntity(entity.type, entity.id, {
//   // 'Field Name': newValue
// });
